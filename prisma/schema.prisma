generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CLOSED
}

enum AuditEventType {
  AUTH
  PROJECT
  TASK
  FILE
  USER
  SYSTEM
  BUDGET
}

enum BudgetCategory {
  MECHANICAL
  ELECTRICAL
  SYSTEMS
  SOFTWARE
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskCategory {
  PROJECT_WORK
  ADMINISTRATIVE
  TRAINING
  REVIEW
  RESEARCH
  MAINTENANCE
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  BLOCKED
  REVIEW
  COMPLETED
}

enum ThemePreference {
  SYSTEM
  LIGHT
  DARK
}

enum LayoutDensityPreference {
  COMFORTABLE
  COMPACT
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  isSystem    Boolean      @default(false)
  users       User[]
  permissions Permission[]
}

model Permission {
  id     String @id @default(cuid())
  action String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId, action], map: "Permission_roleId_action_idx")
}

model User {
  id                   String          @id @default(cuid())
  email                String          @unique
  name                 String?
  passwordHash         String
  roleId               String?
  role                 Role?           @relation(fields: [roleId], references: [id])
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  projects             Project[]       @relation("ProjectsCreatedBy")
  memberships          ProjectMember[]
  assignedTasks        Task[]          @relation("TaskAssignee")
  createdTasks         Task[]          @relation("TasksCreated")
  assignments          Assignment[]
  files                File[]          @relation("FileCreator")
  auditEvents          AuditEvent[]
  sessions             Session[]
  passkeys             Passkey[]
  accounts             Account[]
  passwordResetTokens  PasswordResetToken[]
  budgetSheets         BudgetSheet[]   @relation("BudgetSheetCreatedBy")
  approvedBudgetSheets BudgetSheet[]   @relation("BudgetSheetApprovedBy")
  budgetLines          BudgetLine[]
  budgetVersions       BudgetVersion[]
  preference           UserPreference?
  budgetWorkspaces     BudgetWorkspace[] @relation("WorkspaceOwner")
}

model Project {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  status        ProjectStatus  @default(PLANNING)
  startDate     DateTime?
  endDate       DateTime?
  budgetPlanned Decimal?       @db.Decimal(18, 2)
  budgetActual  Decimal?       @db.Decimal(18, 2)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   String
  createdBy     User           @relation("ProjectsCreatedBy", fields: [createdById], references: [id])
  memberships   ProjectMember[]
  tasks         Task[]
  files         File[]
  budgetSheets  BudgetSheet[]
  budgetWorkspaces BudgetWorkspace[]
}

model ProjectMember {
  id            String  @id @default(cuid())
  projectId     String
  userId        String
  roleInProject String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Task {
  id             String       @id @default(cuid())
  projectId      String?
  title          String
  description    String?
  start          DateTime
  end            DateTime
  progress       Int          @default(0)
  priority       TaskPriority @default(MEDIUM)
  category       TaskCategory @default(PROJECT_WORK)
  status         TaskStatus   @default(NOT_STARTED)
  estimatedHours Int?
  actualHours    Int?
  parentId       String?
  parent         Task?        @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks       Task[]       @relation("TaskHierarchy")
  dependsOn      String[]
  assigneeId     String?
  assignee       User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdById    String
  createdBy      User         @relation("TasksCreated", fields: [createdById], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  project        Project?     @relation(fields: [projectId], references: [id])
  assignments    Assignment[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([createdById])
  @@index([status])
  @@index([priority])
}

model Assignment {
  id            String   @id @default(cuid())
  taskId        String
  userId        String
  allocationPct Int      @default(0)
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model File {
  id           String   @id @default(cuid())
  projectId    String
  name         String
  key          String   @unique
  version      Int      @default(1)
  mime         String
  size         Int
  createdById  String
  createdAt    DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id])
  createdBy    User     @relation("FileCreator", fields: [createdById], references: [id])
}

model AuditEvent {
  id        String          @id @default(cuid())
  userId    String?
  type      AuditEventType
  entity    String
  entityId  String
  data      Json?
  createdAt DateTime        @default(now())
  user      User?           @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([userId])
}

model Passkey {
  id                     String   @id @default(cuid())
  userId                 String
  credentialID           String   @unique
  credentialPublicKey    Bytes
  counter                Int      @default(0)
  transports             String[]
  credentialDeviceType   String
  credentialBackedUp     Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetSheet {
  id           String        @id @default(cuid())
  projectId    String?
  project      Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspaceId  String?
  workspace    BudgetWorkspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  currency     String        @default("EUR") // default currency for summary
  vatDefault   Decimal?      @db.Decimal(5,2)
  createdById  String
  createdBy    User          @relation("BudgetSheetCreatedBy", fields: [createdById], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lines        BudgetLine[]
  versions     BudgetVersion[]
  approvedAt   DateTime?
  approvedById String?
  approvedBy   User?         @relation("BudgetSheetApprovedBy", fields: [approvedById], references: [id])

  @@unique([projectId])
  @@unique([workspaceId])
}

model BudgetLine {
  id           String          @id @default(cuid())
  sheetId      String
  sheet        BudgetSheet     @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  name         String
  category     String
  quantity     Decimal         @db.Decimal(18,3)
  unit         String?
  unitPrice    Decimal         @db.Decimal(18,4)
  currency     String          @default("EUR")
  vatPercent   Decimal?        @db.Decimal(5,2)
  supplier     String?
  link         String?
  notes        String?
  createdById  String
  createdBy    User            @relation(fields: [createdById], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([sheetId, category])
}

model BudgetVersion {
  id           String      @id @default(cuid())
  sheetId      String
  sheet        BudgetSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  label        String      // e.g., "v1", "Kickoff", "Pre-PO"
  createdById  String
  createdBy    User        @relation(fields: [createdById], references: [id])
  createdAt    DateTime    @default(now())
  snapshotJson Json        // store snapshot for fast restore/compare
}

model UserPreference {
  userId   String @id
  theme    ThemePreference           @default(DARK)
  density  LayoutDensityPreference   @default(COMFORTABLE)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetWorkspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  ownerId     String?
  owner       User?    @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  planned     Decimal? @db.Decimal(18, 2)
  actual      Decimal? @db.Decimal(18, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sheet       BudgetSheet?
}
