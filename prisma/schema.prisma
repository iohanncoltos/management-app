generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CLOSED
}

enum AuditEventType {
  AUTH
  PROJECT
  TASK
  FILE
  USER
  SYSTEM
  BUDGET
}

enum BudgetCategory {
  MECHANICAL
  ELECTRICAL
  SYSTEMS
  SOFTWARE
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskCategory {
  PROJECT_WORK
  ADMINISTRATIVE
  TRAINING
  REVIEW
  RESEARCH
  MAINTENANCE
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  BLOCKED
  REVIEW
  COMPLETED
}

enum ThemePreference {
  SYSTEM
  LIGHT
  DARK
}

enum LayoutDensityPreference {
  COMFORTABLE
  COMPACT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  PROGRESS_MILESTONE
  TASK_BLOCKED
  TASK_REASSIGNED
  CHAT_MENTION
}

enum ReportStatus {
  DRAFT
  SUBMITTED
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  isSystem    Boolean      @default(false)
  users       User[]
  permissions Permission[]
}

model Permission {
  id     String @id @default(cuid())
  action String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId, action], map: "Permission_roleId_action_idx")
}

model User {
  id                   String          @id @default(cuid())
  email                String          @unique
  name                 String?
  passwordHash         String
  avatarUrl            String?
  cvUrl                String?
  cvFileName           String?
  roleId               String?
  role                 Role?           @relation(fields: [roleId], references: [id])
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  projects             Project[]       @relation("ProjectsCreatedBy")
  memberships          ProjectMember[]
  assignedTasks        Task[]          @relation("TaskAssignee")
  createdTasks         Task[]          @relation("TasksCreated")
  assignments          Assignment[]
  files                File[]          @relation("FileCreator")
  auditEvents          AuditEvent[]
  sessions             Session[]
  passkeys             Passkey[]
  accounts             Account[]
  passwordResetTokens  PasswordResetToken[]
  budgetSheets         BudgetSheet[]   @relation("BudgetSheetCreatedBy")
  approvedBudgetSheets BudgetSheet[]   @relation("BudgetSheetApprovedBy")
  budgetLines          BudgetLine[]
  budgetVersions       BudgetVersion[]
  preference           UserPreference?
  budgetWorkspaces     BudgetWorkspace[] @relation("WorkspaceOwner")
  taskUpdates          TaskUpdateLog[] @relation("TaskUpdates")
  notifications        Notification[]
  dailyReports         DailyReport[]
  chatMembers          ChatMember[]
  chatMessages         ChatMessage[]
  createdChats         Chat[]          @relation("ChatCreator")
}

model Project {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  status        ProjectStatus  @default(PLANNING)
  startDate     DateTime?
  endDate       DateTime?
  budgetPlanned Decimal?       @db.Decimal(18, 2)
  budgetActual  Decimal?       @db.Decimal(18, 2)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   String
  createdBy     User           @relation("ProjectsCreatedBy", fields: [createdById], references: [id])
  memberships   ProjectMember[]
  tasks         Task[]
  files         File[]
  budgetSheets  BudgetSheet[]
  budgetWorkspaces BudgetWorkspace[]
  notifications Notification[]
  dailyReports  DailyReport[]
  chats         Chat[]
}

model ProjectMember {
  id            String  @id @default(cuid())
  projectId     String
  userId        String
  roleInProject String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Task {
  id             String       @id @default(cuid())
  projectId      String?
  title          String
  description    String?
  start          DateTime
  end            DateTime
  progress       Int          @default(0)
  priority       TaskPriority @default(MEDIUM)
  category       TaskCategory @default(PROJECT_WORK)
  status         TaskStatus   @default(NOT_STARTED)
  estimatedHours Int?
  actualHours    Int?
  parentId       String?
  parent         Task?        @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks       Task[]       @relation("TaskHierarchy")
  dependsOn      String[]
  assigneeId     String?
  assignee       User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdById    String
  createdBy      User         @relation("TasksCreated", fields: [createdById], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  project        Project?     @relation(fields: [projectId], references: [id])
  assignments    Assignment[]
  updateLogs     TaskUpdateLog[]
  notifications  Notification[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([createdById])
  @@index([status])
  @@index([priority])
}

model Assignment {
  id            String   @id @default(cuid())
  taskId        String
  userId        String
  allocationPct Int      @default(0)
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model File {
  id           String   @id @default(cuid())
  projectId    String
  name         String
  key          String   @unique
  version      Int      @default(1)
  mime         String
  size         Int
  createdById  String
  createdAt    DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id])
  createdBy    User     @relation("FileCreator", fields: [createdById], references: [id])
}

model AuditEvent {
  id        String          @id @default(cuid())
  userId    String?
  type      AuditEventType
  entity    String
  entityId  String
  data      Json?
  createdAt DateTime        @default(now())
  user      User?           @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([userId])
}

model Passkey {
  id                     String   @id @default(cuid())
  userId                 String
  credentialID           String   @unique
  credentialPublicKey    Bytes
  counter                Int      @default(0)
  transports             String[]
  credentialDeviceType   String
  credentialBackedUp     Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetSheet {
  id           String        @id @default(cuid())
  projectId    String?
  project      Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspaceId  String?
  workspace    BudgetWorkspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  currency     String        @default("EUR") // default currency for summary
  vatDefault   Decimal?      @db.Decimal(5,2)
  createdById  String
  createdBy    User          @relation("BudgetSheetCreatedBy", fields: [createdById], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lines        BudgetLine[]
  versions     BudgetVersion[]
  approvedAt   DateTime?
  approvedById String?
  approvedBy   User?         @relation("BudgetSheetApprovedBy", fields: [approvedById], references: [id])

  @@unique([projectId])
  @@unique([workspaceId])
}

model BudgetLine {
  id           String          @id @default(cuid())
  sheetId      String
  sheet        BudgetSheet     @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  name         String
  category     String
  quantity     Decimal         @db.Decimal(18,3)
  unit         String?
  unitPrice    Decimal         @db.Decimal(18,4)
  currency     String          @default("EUR")
  vatPercent   Decimal?        @db.Decimal(5,2)
  supplier     String?
  link         String?
  notes        String?
  createdById  String
  createdBy    User            @relation(fields: [createdById], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([sheetId, category])
}

model BudgetVersion {
  id           String      @id @default(cuid())
  sheetId      String
  sheet        BudgetSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  label        String      // e.g., "v1", "Kickoff", "Pre-PO"
  createdById  String
  createdBy    User        @relation(fields: [createdById], references: [id])
  createdAt    DateTime    @default(now())
  snapshotJson Json        // store snapshot for fast restore/compare
}

model UserPreference {
  userId               String @id
  theme                ThemePreference           @default(DARK)
  density              LayoutDensityPreference   @default(COMFORTABLE)
  notificationSound    Boolean                   @default(true)
  emailNotifications   Boolean                   @default(true)
  desktopNotifications Boolean                   @default(false)
  doNotDisturbUntil    DateTime?                 // DND mode until this time
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetWorkspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  ownerId     String?
  owner       User?    @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  planned     Decimal? @db.Decimal(18, 2)
  actual      Decimal? @db.Decimal(18, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sheet       BudgetSheet?
}

model TaskUpdateLog {
  id         String   @id @default(cuid())
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  updatedById String
  updatedBy   User    @relation("TaskUpdates", fields: [updatedById], references: [id])

  changeType  String  // "PROGRESS", "STATUS", "COMPLETED", "BLOCKED", "CANCELLED"

  oldValue    String? // Old progress or status
  newValue    String  // New progress or status

  milestone   Boolean @default(false) // True if 25%, 50%, 75%, 100%

  notified    Boolean @default(false) // Track if included in digest

  createdAt   DateTime @default(now())

  @@index([taskId, createdAt])
  @@index([createdAt])
  @@index([notified])
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  taskId      String?
  projectId   String?
  actionUrl   String?
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task?            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@index([userId, createdAt])
  @@index([createdAt])
}

model DailyReport {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  reportDate      DateTime     // The date this report is for

  projectId       String?      // Optional: specific project
  project         Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Auto-populated data (JSON arrays of task data)
  tasksCompleted  Json?        // Tasks completed on this day
  tasksInProgress Json?        // Tasks worked on

  // User-written content
  workSummary     String       @db.Text // Main report content
  blockers        String?      @db.Text // Issues/blockers
  tomorrowPlan    String?      @db.Text // Plans for next day
  hoursWorked     Decimal?     @db.Decimal(4, 2) // e.g., 8.50 hours

  // Email & submission
  status          ReportStatus @default(DRAFT)
  submittedAt     DateTime?
  emailedTo       String?      @db.Text // Comma-separated email addresses

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userId, reportDate])
  @@index([projectId, reportDate])
  @@index([reportDate])
  @@index([status])
}

enum ChatType {
  DIRECT    // 1-on-1 chat
  PROJECT   // Project-wide chat
}

model Chat {
  id          String      @id @default(cuid())
  type        ChatType    @default(DIRECT)
  name        String?     // For project chats (e.g., "Project ABC Team")

  projectId   String?     // Link to project if PROJECT type
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   User        @relation("ChatCreator", fields: [createdById], references: [id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  members     ChatMember[]
  messages    ChatMessage[]

  @@index([projectId])
  @@index([createdById])
  @@index([type])
}

model ChatMember {
  id          String   @id @default(cuid())
  chatId      String
  userId      String

  joinedAt    DateTime @default(now())
  lastReadAt  DateTime @default(now())
  isAdmin     Boolean  @default(false) // Can add/remove members

  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([userId])
  @@index([chatId, lastReadAt])
}

model ChatMessage {
  id          String   @id @default(cuid())
  chatId      String
  senderId    String

  content     String   @db.Text
  mentions    String[] // Array of user IDs mentioned in this message
  mentionAll  Boolean  @default(false) // True if @all was used

  fileUrl     String?  // S3/R2 file URL
  fileName    String?  // Original filename
  fileSize    Int?     // File size in bytes
  fileMime    String?  // MIME type

  replyToId   String?  // For threading/replies

  isEdited    Boolean  @default(false)
  isDeleted   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo     ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies     ChatMessage[] @relation("MessageReplies")

  @@index([chatId, createdAt])
  @@index([senderId])
  @@index([mentions])
}
