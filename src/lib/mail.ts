import { Resend } from "resend";

import { env } from "./env";

export const resend = new Resend(env.server.RESEND_API_KEY);

interface ProjectMailParams {
  projectCode: string;
  to: string | string[];
  subject: string;
  html: string;
  text?: string;
}

export async function sendProjectMail({ projectCode, to, subject, html, text }: ProjectMailParams) {
  const prefixedSubject = `[Project: ${projectCode}] ${subject}`;

  await resend.emails.send({
    from: env.server.RESEND_FROM_EMAIL,
    to: Array.isArray(to) ? to : [to],
    subject: prefixedSubject,
    html,
    text,
  });
}

interface ResetPasswordParams {
  to: string;
  token: string;
}

export async function sendPasswordResetEmail({ to, token }: ResetPasswordParams) {
  const resetUrl = `${env.server.APP_BASE_URL}/reset-password?token=${token}`;
  const html = `
    <p>We received a request to reset your Intermax Management App password.</p>
    <p><a href="${resetUrl}">Reset Password</a></p>
    <p>If you did not request this, you can ignore this email.</p>
  `;

  await resend.emails.send({
    from: env.server.RESEND_FROM_EMAIL,
    to: [to],
    subject: "Intermax Management App - Reset Password",
    html,
    text: `Use the link to reset your password: ${resetUrl}`,
  });
}

interface TaskAssignmentMailParams {
  to: string;
  taskTitle: string;
  start: Date;
  end: Date;
  description?: string | null;
  projectName?: string | null;
  assignerName?: string | null;
  taskId?: string;
}

const dateFormatter = new Intl.DateTimeFormat("en-US", {
  dateStyle: "medium",
  timeStyle: "short",
});

export async function sendTaskAssignmentEmail({
  to,
  taskTitle,
  start,
  end,
  description,
  projectName,
  assignerName,
  taskId,
}: TaskAssignmentMailParams) {
  const startLabel = dateFormatter.format(start);
  const endLabel = dateFormatter.format(end);
  const projectLine = projectName ? `<p><strong>Project:</strong> ${projectName}</p>` : "";
  const descriptionLine = description ? `<p><strong>Details:</strong><br/>${description.replace(/\n/g, "<br/>")}</p>` : "";
  const assigner = assignerName ? `${assignerName}` : "Your coordinator";
  const taskUrl = taskId ? `${env.server.APP_BASE_URL}/tasks?task=${taskId}` : `${env.server.APP_BASE_URL}/tasks`;

  const html = `
    <p>${assigner} has assigned you a new task.</p>
    <p><strong>Task:</strong> ${taskTitle}</p>
    ${projectLine}
    <p><strong>Starts:</strong> ${startLabel}<br/><strong>Ends:</strong> ${endLabel}</p>
    ${descriptionLine}
    <p><a href="${taskUrl}">Open this task</a> to review the requirements and update progress.</p>
    <p style="margin-top:24px; font-size:12px; color:#6b7280;">This notification was generated by Intermax Management App.</p>
  `;

  const textLines = [
    `${assigner} has assigned you a new task.`,
    ``,
    `Task: ${taskTitle}`,
    projectName ? `Project: ${projectName}` : null,
    `Starts: ${startLabel}`,
    `Ends: ${endLabel}`,
    description ? `\nDetails:\n${description}` : null,
    ``,
    `Open the task: ${taskUrl}`,
  ].filter(Boolean);
  const text = textLines.join("\n");

  try {
    const result = await resend.emails.send({
      from: env.server.RESEND_FROM_EMAIL,
      to: [to],
      subject: `New task assigned: ${taskTitle}`,
      html,
      text,
    });

    console.log("Resend API response:", result);

    if (result.error) {
      console.error("Resend API error:", result.error);
      throw new Error(`Resend API error: ${JSON.stringify(result.error)}`);
    }

    return result;
  } catch (error) {
    console.error("Failed to send email via Resend:", error);
    throw error;
  }
}

interface TaskUpdateMailParams {
  to: string;
  taskTitle: string;
  updaterName: string;
  oldProgress?: number;
  newProgress: number;
  projectName?: string | null;
  taskId: string;
}

export async function sendTaskProgressEmail({
  to,
  taskTitle,
  updaterName,
  oldProgress,
  newProgress,
  projectName,
  taskId,
}: TaskUpdateMailParams) {
  const projectLine = projectName ? `<p><strong>Project:</strong> ${projectName}</p>` : "";
  const progressChange = oldProgress !== undefined
    ? `${oldProgress}% ‚Üí <strong>${newProgress}%</strong>`
    : `<strong>${newProgress}%</strong>`;
  const taskUrl = `${env.server.APP_BASE_URL}/tasks?task=${taskId}`;

  const html = `
    <h2 style="color: #3b82f6;">üìä Task Progress Update</h2>
    <p><strong>${updaterName}</strong> updated the progress on a task you created.</p>
    <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 20px 0;" />
    <p><strong>Task:</strong> ${taskTitle}</p>
    ${projectLine}
    <p><strong>Progress:</strong> ${progressChange}</p>
    <p style="margin-top: 24px;">
      <a href="${taskUrl}" style="background-color: #3b82f6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">
        View Task Details
      </a>
    </p>
    <p style="margin-top:24px; font-size:12px; color:#6b7280;">This notification was generated by Intermax Management App.</p>
  `;

  const text = [
    `Task Progress Update`,
    ``,
    `${updaterName} updated the progress on a task you created.`,
    ``,
    `Task: ${taskTitle}`,
    projectName ? `Project: ${projectName}` : null,
    `Progress: ${oldProgress !== undefined ? `${oldProgress}% ‚Üí ${newProgress}%` : `${newProgress}%`}`,
    ``,
    `View task: ${taskUrl}`,
  ].filter(Boolean).join("\n");

  await resend.emails.send({
    from: env.server.RESEND_FROM_EMAIL,
    to: [to],
    subject: `Task progress update: ${taskTitle} (${newProgress}%)`,
    html,
    text,
  });
}

interface TaskCompletedMailParams {
  to: string;
  taskTitle: string;
  completerName: string;
  projectName?: string | null;
  taskId: string;
}

export async function sendTaskCompletedEmail({
  to,
  taskTitle,
  completerName,
  projectName,
  taskId,
}: TaskCompletedMailParams) {
  const projectLine = projectName ? `<p><strong>Project:</strong> ${projectName}</p>` : "";
  const taskUrl = `${env.server.APP_BASE_URL}/tasks?task=${taskId}`;

  const html = `
    <h2 style="color: #10b981;">‚úÖ Task Completed!</h2>
    <p><strong>${completerName}</strong> marked a task as completed.</p>
    <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 20px 0;" />
    <p><strong>Task:</strong> ${taskTitle}</p>
    ${projectLine}
    <p style="background-color: #d1fae5; padding: 15px; border-radius: 5px; border-left: 4px solid #10b981;">
      <strong>Status:</strong> <span style="color: #059669;">COMPLETED</span> üéâ
    </p>
    <p style="margin-top: 24px;">
      <a href="${taskUrl}" style="background-color: #10b981; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">
        View Task Details
      </a>
    </p>
    <p style="margin-top:24px; font-size:12px; color:#6b7280;">This notification was generated by Intermax Management App.</p>
  `;

  const text = [
    `Task Completed!`,
    ``,
    `${completerName} marked a task as completed.`,
    ``,
    `Task: ${taskTitle}`,
    projectName ? `Project: ${projectName}` : null,
    `Status: COMPLETED`,
    ``,
    `View task: ${taskUrl}`,
  ].filter(Boolean).join("\n");

  await resend.emails.send({
    from: env.server.RESEND_FROM_EMAIL,
    to: [to],
    subject: `‚úÖ Task completed: ${taskTitle}`,
    html,
    text,
  });
}

interface TaskBlockedMailParams {
  to: string;
  taskTitle: string;
  blockerName: string;
  projectName?: string | null;
  taskId: string;
}

export async function sendTaskBlockedEmail({
  to,
  taskTitle,
  blockerName,
  projectName,
  taskId,
}: TaskBlockedMailParams) {
  const projectLine = projectName ? `<p><strong>Project:</strong> ${projectName}</p>` : "";
  const taskUrl = `${env.server.APP_BASE_URL}/tasks?task=${taskId}`;

  const html = `
    <h2 style="color: #ef4444;">üö´ Task Blocked</h2>
    <p><strong>${blockerName}</strong> marked a task as blocked.</p>
    <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 20px 0;" />
    <p><strong>Task:</strong> ${taskTitle}</p>
    ${projectLine}
    <p style="background-color: #fee2e2; padding: 15px; border-radius: 5px; border-left: 4px solid #ef4444;">
      <strong>Status:</strong> <span style="color: #dc2626;">BLOCKED</span> ‚ö†Ô∏è
    </p>
    <p>This task requires your attention to resolve the blocker.</p>
    <p style="margin-top: 24px;">
      <a href="${taskUrl}" style="background-color: #ef4444; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">
        View Task & Resolve
      </a>
    </p>
    <p style="margin-top:24px; font-size:12px; color:#6b7280;">This notification was generated by Intermax Management App.</p>
  `;

  const text = [
    `Task Blocked`,
    ``,
    `${blockerName} marked a task as blocked.`,
    ``,
    `Task: ${taskTitle}`,
    projectName ? `Project: ${projectName}` : null,
    `Status: BLOCKED`,
    ``,
    `This task requires your attention to resolve the blocker.`,
    ``,
    `View task: ${taskUrl}`,
  ].filter(Boolean).join("\n");

  await resend.emails.send({
    from: env.server.RESEND_FROM_EMAIL,
    to: [to],
    subject: `‚ö†Ô∏è Task blocked: ${taskTitle}`,
    html,
    text,
  });
}

interface TaskCancelledMailParams {
  to: string;
  taskTitle: string;
  cancellerName: string;
  projectName?: string | null;
  taskId: string;
}

export async function sendTaskCancelledEmail({
  to,
  taskTitle,
  cancellerName,
  projectName,
  taskId,
}: TaskCancelledMailParams) {
  const projectLine = projectName ? `<p><strong>Project:</strong> ${projectName}</p>` : "";
  const taskUrl = `${env.server.APP_BASE_URL}/tasks?task=${taskId}`;

  const html = `
    <h2 style="color: #6b7280;">‚ùå Task Cancelled</h2>
    <p><strong>${cancellerName}</strong> cancelled a task.</p>
    <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 20px 0;" />
    <p><strong>Task:</strong> ${taskTitle}</p>
    ${projectLine}
    <p style="background-color: #f3f4f6; padding: 15px; border-radius: 5px; border-left: 4px solid #6b7280;">
      <strong>Status:</strong> <span style="color: #4b5563;">CANCELLED</span>
    </p>
    <p style="margin-top: 24px;">
      <a href="${taskUrl}" style="background-color: #6b7280; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">
        View Task Details
      </a>
    </p>
    <p style="margin-top:24px; font-size:12px; color:#6b7280;">This notification was generated by Intermax Management App.</p>
  `;

  const text = [
    `Task Cancelled`,
    ``,
    `${cancellerName} cancelled a task.`,
    ``,
    `Task: ${taskTitle}`,
    projectName ? `Project: ${projectName}` : null,
    `Status: CANCELLED`,
    ``,
    `View task: ${taskUrl}`,
  ].filter(Boolean).join("\n");

  await resend.emails.send({
    from: env.server.RESEND_FROM_EMAIL,
    to: [to],
    subject: `Task cancelled: ${taskTitle}`,
    html,
    text,
  });
}

interface DailyDigestParams {
  to: string;
  recipientName: string | null;
  progressUpdates: Array<{
    taskTitle: string;
    assigneeName: string | null;
    oldValue: string | null;
    newValue: string;
    milestone: boolean;
    projectName: string | null;
  }>;
  completedTasks: Array<{
    taskTitle: string;
    assigneeName: string | null;
    projectName: string | null;
  }>;
  blockedTasks: Array<{
    taskTitle: string;
    assigneeName: string | null;
    projectName: string | null;
  }>;
  tasksInProgress: Array<{
    title: string;
    assigneeName: string | null;
    progress: number;
    dueDate: Date;
  }>;
  hasUpdates: boolean;
}

export async function sendDailyDigestEmail({
  to,
  recipientName,
  progressUpdates,
  completedTasks,
  blockedTasks,
  tasksInProgress,
  hasUpdates,
}: DailyDigestParams) {
  const today = new Date().toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  const greeting = recipientName ? `Hi ${recipientName}` : "Hi";

  // Build HTML sections
  let progressSection = "";
  if (progressUpdates.length > 0) {
    const items = progressUpdates
      .map(
        (update) => `
      <div style="padding: 12px; background-color: #f9fafb; border-left: 3px solid #3b82f6; margin-bottom: 8px; border-radius: 4px;">
        <p style="margin: 0 0 4px 0; font-weight: 600; color: #111827;">${update.taskTitle}</p>
        <p style="margin: 0; font-size: 14px; color: #6b7280;">
          ${update.assigneeName ? `Assigned to: ${update.assigneeName} ‚Ä¢ ` : ""}
          Progress: ${update.oldValue ? `${update.oldValue}% ‚Üí ` : ""}<strong>${update.newValue}%</strong>
          ${update.milestone ? " ‚ö° <span style='color: #3b82f6;'>Milestone!</span>" : ""}
        </p>
        ${update.projectName ? `<p style="margin: 4px 0 0 0; font-size: 12px; color: #9ca3af;">Project: ${update.projectName}</p>` : ""}
      </div>
    `
      )
      .join("");

    progressSection = `
      <h3 style="color: #3b82f6; margin: 24px 0 12px 0; font-size: 18px;">üìä Progress Updates</h3>
      ${items}
    `;
  }

  let completedSection = "";
  if (completedTasks.length > 0) {
    const items = completedTasks
      .map(
        (task) => `
      <div style="padding: 12px; background-color: #d1fae5; border-left: 3px solid #10b981; margin-bottom: 8px; border-radius: 4px;">
        <p style="margin: 0 0 4px 0; font-weight: 600; color: #111827;">${task.taskTitle}</p>
        <p style="margin: 0; font-size: 14px; color: #059669;">
          ‚úÖ Completed ${task.assigneeName ? `by ${task.assigneeName}` : ""}
        </p>
        ${task.projectName ? `<p style="margin: 4px 0 0 0; font-size: 12px; color: #6b7280;">Project: ${task.projectName}</p>` : ""}
      </div>
    `
      )
      .join("");

    completedSection = `
      <h3 style="color: #10b981; margin: 24px 0 12px 0; font-size: 18px;">‚úÖ Completed Tasks</h3>
      ${items}
    `;
  }

  let blockedSection = "";
  if (blockedTasks.length > 0) {
    const items = blockedTasks
      .map(
        (task) => `
      <div style="padding: 12px; background-color: #fee2e2; border-left: 3px solid #ef4444; margin-bottom: 8px; border-radius: 4px;">
        <p style="margin: 0 0 4px 0; font-weight: 600; color: #111827;">${task.taskTitle}</p>
        <p style="margin: 0; font-size: 14px; color: #dc2626;">
          üö´ Blocked ${task.assigneeName ? `(${task.assigneeName})` : ""}
        </p>
        ${task.projectName ? `<p style="margin: 4px 0 0 0; font-size: 12px; color: #6b7280;">Project: ${task.projectName}</p>` : ""}
      </div>
    `
      )
      .join("");

    blockedSection = `
      <h3 style="color: #ef4444; margin: 24px 0 12px 0; font-size: 18px;">üö´ Blocked Tasks</h3>
      ${items}
      <p style="color: #dc2626; font-size: 14px;">These tasks require your attention to resolve blockers.</p>
    `;
  }

  let tasksInProgressSection = "";
  if (!hasUpdates && tasksInProgress.length > 0) {
    const items = tasksInProgress
      .map((task) => {
        const dueStr = task.dueDate.toLocaleDateString("en-US", { month: "short", day: "numeric" });
        return `
      <div style="padding: 12px; background-color: #fef3c7; border-left: 3px solid #f59e0b; margin-bottom: 8px; border-radius: 4px;">
        <p style="margin: 0 0 4px 0; font-weight: 600; color: #111827;">${task.title}</p>
        <p style="margin: 0; font-size: 14px; color: #92400e;">
          ${task.assigneeName || "Unassigned"} ‚Ä¢ ${task.progress}% complete ‚Ä¢ Due: ${dueStr}
        </p>
      </div>
    `;
      })
      .join("");

    tasksInProgressSection = `
      <h3 style="color: #f59e0b; margin: 24px 0 12px 0; font-size: 18px;">üìã Tasks Still in Progress</h3>
      ${items}
      <p style="color: #92400e; font-size: 14px; margin-top: 12px;">Consider checking in with your team! üöÄ</p>
    `;
  }

  const summary = hasUpdates
    ? `
    <div style="background-color: #eff6ff; padding: 16px; border-radius: 8px; margin: 24px 0;">
      <p style="margin: 0; font-size: 16px; font-weight: 600; color: #1e40af;">
        üìã Summary: ${progressUpdates.length} progress update${progressUpdates.length !== 1 ? "s" : ""},
        ${completedTasks.length} completed, ${blockedTasks.length} blocked
      </p>
    </div>
  `
    : `
    <div style="background-color: #fef3c7; padding: 16px; border-radius: 8px; margin: 24px 0;">
      <p style="margin: 0; font-size: 16px; font-weight: 600; color: #92400e;">
        üìã No task updates today
      </p>
    </div>
  `;

  const html = `
    <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
      <h1 style="color: #111827; font-size: 24px; margin-bottom: 8px;">Daily Task Update Summary</h1>
      <p style="color: #6b7280; font-size: 14px; margin-bottom: 24px;">${today}</p>

      <p style="font-size: 16px; color: #374151;">${greeting},</p>

      ${hasUpdates ? "<p style='font-size: 16px; color: #374151;'>Here's what happened with tasks you assigned:</p>" : "<p style='font-size: 16px; color: #374151;'>None of your assigned tasks were updated today.</p>"}

      <hr style="border: none; border-top: 2px solid #e5e7eb; margin: 24px 0;" />

      ${progressSection}
      ${completedSection}
      ${blockedSection}
      ${tasksInProgressSection}

      ${summary}

      <p style="margin-top: 32px;">
        <a href="${env.server.APP_BASE_URL}/tasks" style="background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; font-weight: 600;">
          View All Tasks
        </a>
      </p>

      <p style="margin-top:32px; padding-top: 24px; border-top: 1px solid #e5e7eb; font-size:12px; color:#6b7280;">
        This is your daily task digest from Intermax Management App.<br/>
        You're receiving this because you created tasks that were updated today.
      </p>
    </div>
  `;

  const text = [
    `Daily Task Update Summary - ${today}`,
    "",
    greeting + ",",
    "",
    hasUpdates ? "Here's what happened with tasks you assigned:" : "None of your assigned tasks were updated today.",
    "",
    progressUpdates.length > 0 ? "‚ïê‚ïê‚ïê Progress Updates ‚ïê‚ïê‚ïê" : null,
    ...progressUpdates.map(
      (u) =>
        `‚Ä¢ ${u.taskTitle} ${u.assigneeName ? `(${u.assigneeName})` : ""}: ${u.oldValue ? `${u.oldValue}% ‚Üí ` : ""}${u.newValue}%${u.milestone ? " ‚ö° Milestone!" : ""}`
    ),
    "",
    completedTasks.length > 0 ? "‚ïê‚ïê‚ïê Completed Tasks ‚ïê‚ïê‚ïê" : null,
    ...completedTasks.map((t) => `‚úÖ ${t.taskTitle} ${t.assigneeName ? `(${t.assigneeName})` : ""}`),
    "",
    blockedTasks.length > 0 ? "‚ïê‚ïê‚ïê Blocked Tasks ‚ïê‚ïê‚ïê" : null,
    ...blockedTasks.map((t) => `üö´ ${t.taskTitle} ${t.assigneeName ? `(${t.assigneeName})` : ""}`),
    "",
    !hasUpdates && tasksInProgress.length > 0 ? "‚ïê‚ïê‚ïê Tasks Still in Progress ‚ïê‚ïê‚ïê" : null,
    ...(!hasUpdates
      ? tasksInProgress.map((t) => {
          const dueStr = t.dueDate.toLocaleDateString("en-US", { month: "short", day: "numeric" });
          return `‚Ä¢ ${t.title} - ${t.assigneeName || "Unassigned"} (${t.progress}%, due ${dueStr})`;
        })
      : []),
    "",
    `View all tasks: ${env.server.APP_BASE_URL}/tasks`,
  ]
    .filter((line) => line !== null)
    .join("\n");

  await resend.emails.send({
    from: env.server.RESEND_FROM_EMAIL,
    to: [to],
    subject: hasUpdates ? `Daily Task Updates - ${today}` : `No Task Updates Today - ${today}`,
    html,
    text,
  });
}
